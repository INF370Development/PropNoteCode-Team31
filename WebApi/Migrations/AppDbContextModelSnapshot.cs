// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Repositories;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Models.Admin.SnagList", b =>
                {
                    b.Property<int>("SnagListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SnagListId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("SnagListDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SnagListId");

                    b.ToTable("SnagList");
                });

            modelBuilder.Entity("WebApi.Models.Admin.SnagListItem", b =>
                {
                    b.Property<int>("SnagListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SnagListItemId"));

                    b.Property<string>("SnagListItemDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SnagListItemId");

                    b.ToTable("SnagListItem");
                });

            modelBuilder.Entity("WebApi.Models.Admin.SnagListItemLine", b =>
                {
                    b.Property<int>("SnagListItemLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SnagListItemLineId"));

                    b.Property<int>("SnagListId")
                        .HasColumnType("int");

                    b.Property<int>("SnagListItemsId")
                        .HasColumnType("int");

                    b.HasKey("SnagListItemLineId");

                    b.ToTable("SnagListItemLine");
                });

            modelBuilder.Entity("WebApi.Models.Broker.Broker", b =>
                {
                    b.Property<int>("BrokerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrokerID"));

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrokerID");

                    b.ToTable("Broker");
                });

            modelBuilder.Entity("WebApi.Models.Contractor", b =>
                {
                    b.Property<int>("ContractorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractorID"));

                    b.Property<string>("AreaOfBusiness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractorTypeID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ContractorID");

                    b.HasIndex("ContractorTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Contractor");
                });

            modelBuilder.Entity("WebApi.Models.ContractorType", b =>
                {
                    b.Property<int>("ContractorTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractorTypeID"));

                    b.Property<string>("ContractorTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContractorTypeID");

                    b.ToTable("ContractorType");
                });

            modelBuilder.Entity("WebApi.Models.Data.Data", b =>
                {
                    b.Property<int>("DataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataID"));

                    b.Property<string>("DataDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("DataID");

                    b.HasIndex("DataTypeID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("WebApi.Models.Data.DataType", b =>
                {
                    b.Property<int>("DataTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataTypeID"));

                    b.Property<string>("DataTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataTypeID");

                    b.ToTable("DataType");
                });

            modelBuilder.Entity("WebApi.Models.Lease.Deposit", b =>
                {
                    b.Property<int>("DepositID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepositID"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaseID")
                        .HasColumnType("int");

                    b.HasKey("DepositID");

                    b.ToTable("Deposit");
                });

            modelBuilder.Entity("WebApi.Models.Lease.Lease", b =>
                {
                    b.Property<int>("LeaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaseID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthlyAmount")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.HasKey("LeaseID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("TenantID");

                    b.ToTable("Lease");
                });

            modelBuilder.Entity("WebApi.Models.Maintenance.Maintenance", b =>
                {
                    b.Property<int>("MaintenaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenaceID"));

                    b.Property<int>("ContractorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaintenanceStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaintenanceTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("MaintenaceID");

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("WebApi.Models.Maintenance.MaintenanceNote", b =>
                {
                    b.Property<int>("MaintenaceNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenaceNoteID"));

                    b.Property<int>("MaintenaceID")
                        .HasColumnType("int");

                    b.Property<string>("MaintenaceNoteDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenaceNoteID");

                    b.ToTable("MaintenanceNote");
                });

            modelBuilder.Entity("WebApi.Models.Maintenance.MaintenanceStatus", b =>
                {
                    b.Property<int>("MaintenaceStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenaceStatusID"));

                    b.Property<string>("MaintenaceStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenaceStatusID");

                    b.ToTable("MaintenanceStatus");
                });

            modelBuilder.Entity("WebApi.Models.Maintenance.MaintenanceType", b =>
                {
                    b.Property<int>("MaintenaceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenaceTypeID"));

                    b.Property<string>("MaintenaceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenaceTypeID");

                    b.ToTable("MaintenanceType");
                });

            modelBuilder.Entity("WebApi.Models.Maintenance.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("MaintenaceID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("WebApi.Models.Property.Inspection", b =>
                {
                    b.Property<int>("InspectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionID"));

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InspectionStatusID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("InspectionTime")
                        .HasColumnType("time");

                    b.Property<int?>("InspectionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("InspectionID");

                    b.HasIndex("InspectionStatusID");

                    b.HasIndex("InspectionTypeID");

                    b.HasIndex("PropertyID");

                    b.ToTable("Inspection");
                });

            modelBuilder.Entity("WebApi.Models.Property.InspectionStatus", b =>
                {
                    b.Property<int>("InspectionStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionStatusID"));

                    b.Property<string>("InspectionStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InspectionStatusID");

                    b.ToTable("InspectionStatus");
                });

            modelBuilder.Entity("WebApi.Models.Property.InspectionType", b =>
                {
                    b.Property<int>("InspectionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionTypeID"));

                    b.Property<string>("InspectionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InspectionTypeID");

                    b.ToTable("InspectionType");
                });

            modelBuilder.Entity("WebApi.Models.Property.Property", b =>
                {
                    b.Property<int>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyID"));

                    b.Property<int>("BrokerID")
                        .HasColumnType("int");

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyStatusID")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseYear")
                        .HasColumnType("int");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Yard")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PropertyID");

                    b.HasIndex("BrokerID");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("WebApi.Models.Property.PropertyImage", b =>
                {
                    b.Property<int>("PropertyImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyImageId"));

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("PropertyImageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImage");
                });

            modelBuilder.Entity("WebApi.Models.Property.Recovery", b =>
                {
                    b.Property<int>("RecoveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecoveryID"));

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<decimal>("RecoveryAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecoveryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecoveryTypeID")
                        .HasColumnType("int");

                    b.HasKey("RecoveryID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("RecoveryTypeID");

                    b.ToTable("Recovery");
                });

            modelBuilder.Entity("WebApi.Models.Property.RecoveryType", b =>
                {
                    b.Property<int>("RecoveryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecoveryTypeID"));

                    b.Property<string>("RecoveryTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecoveryTypeID");

                    b.ToTable("RecoveryType");
                });

            modelBuilder.Entity("WebApi.Models.Tenant", b =>
                {
                    b.Property<int>("TenantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantID"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TenantID");

                    b.HasIndex("UserID");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WebApi.Models.UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("RoleID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("WebApi.Models.Users.Access", b =>
                {
                    b.Property<int>("AccessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessID"));

                    b.Property<string>("AccessDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessID");

                    b.ToTable("Access");
                });

            modelBuilder.Entity("WebApi.Models.Users.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("WebApi.Models.Users.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("WebApi.Models.Users.UserAccess", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("AccessID")
                        .HasColumnType("int");

                    b.Property<int>("AccessID1")
                        .HasColumnType("int");

                    b.HasKey("RoleID", "AccessID");

                    b.HasIndex("AccessID");

                    b.HasIndex("AccessID1");

                    b.ToTable("UserAccess");
                });

            modelBuilder.Entity("WebApi.Models.Contractor", b =>
                {
                    b.HasOne("WebApi.Models.ContractorType", "ContractorType")
                        .WithMany()
                        .HasForeignKey("ContractorTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractorType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Data.Data", b =>
                {
                    b.HasOne("WebApi.Models.Data.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.Navigation("DataType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WebApi.Models.Lease.Lease", b =>
                {
                    b.HasOne("WebApi.Models.Property.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Tenant", "Tenant")
                        .WithMany("Leases")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("WebApi.Models.Property.Inspection", b =>
                {
                    b.HasOne("WebApi.Models.Property.InspectionStatus", "InspectionStatus")
                        .WithMany()
                        .HasForeignKey("InspectionStatusID");

                    b.HasOne("WebApi.Models.Property.InspectionType", "InspectionType")
                        .WithMany()
                        .HasForeignKey("InspectionTypeID");

                    b.HasOne("WebApi.Models.Property.Property", null)
                        .WithMany("Inspections")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionStatus");

                    b.Navigation("InspectionType");
                });

            modelBuilder.Entity("WebApi.Models.Property.Property", b =>
                {
                    b.HasOne("WebApi.Models.Broker.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("WebApi.Models.Property.PropertyImage", b =>
                {
                    b.HasOne("WebApi.Models.Property.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("WebApi.Models.Property.Recovery", b =>
                {
                    b.HasOne("WebApi.Models.Property.Property", null)
                        .WithMany("Recoveries")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Property.RecoveryType", "RecoveryType")
                        .WithMany()
                        .HasForeignKey("RecoveryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecoveryType");
                });

            modelBuilder.Entity("WebApi.Models.Tenant", b =>
                {
                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.UserRole", b =>
                {
                    b.HasOne("WebApi.Models.Users.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.Users.UserAccess", b =>
                {
                    b.HasOne("WebApi.Models.Users.Access", null)
                        .WithMany("UserAccesses")
                        .HasForeignKey("AccessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Users.Access", "Access")
                        .WithMany()
                        .HasForeignKey("AccessID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Users.Role", "Role")
                        .WithMany("UserAccesses")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Access");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebApi.Models.Property.Property", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("Recoveries");
                });

            modelBuilder.Entity("WebApi.Models.Tenant", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("WebApi.Models.Users.Access", b =>
                {
                    b.Navigation("UserAccesses");
                });

            modelBuilder.Entity("WebApi.Models.Users.Role", b =>
                {
                    b.Navigation("UserAccesses");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
