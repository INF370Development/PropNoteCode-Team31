import { Component, ElementRef, ViewChild, OnInit } from '@angular/core';
import jsPDF from 'jspdf';
import { ViewTenantsComponent } from '../../viewTenants/view-tenants/view-tenants.component';
import { Tenant } from 'src/app/shared/UserModels/Tenant';
import { TenantService } from 'src/app/services/tenant.service';
import { CreateTenantModalComponent } from '../../viewTenants/view-tenants/createTenantModal/create-tenant-modal/create-tenant-modal.component';
import { MatTableDataSource } from '@angular/material/table';

@Component({
  selector: 'app-generate-tenants-report',
  templateUrl: './generate-tenants-report.component.html',
  styleUrls: ['./generate-tenants-report.component.scss']
})

export class GenerateTenantsReportComponent implements OnInit {
  dataSource = new MatTableDataSource<Tenant>();

  pdfGenerated: boolean = false

  ngOnInit(): void {
    this.tenantService.getTenants().subscribe((tenants: any) => {
      this.dataSource.data = tenants;
      this.fetchTableData();
    });
  }

  title = "Tenant report";

  constructor(
    private tenantService: TenantService,
  ) {}

  @ViewChild('cards', { static: false }) cardsContainer!: ElementRef;
  cardData: any[] = [];

  async fetchTableData() {
    try {
      this.tenantService.getTenants().subscribe({
        next: (response) => {
          this.cardData = response;
          console.log(this.cardData);
          this.downloadPDF();
        },
        error: (error) => {
          console.error("Error fetching data:", error);
        }
      });
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  }

  downloadPDF() {
    this.pdfGenerated = true;
    this.generatePDF();
  }

  generatePDF() {
    if (this.cardData && this.cardData.length > 0) {
      const doc = new jsPDF('landscape');
      let yPos = 30;
      let isOddRow = false;

      //HEADING
      const today = new Date();
      const formattedDate = today.toDateString();
      const reportHeading = 'Tenant Report Generated on ' + formattedDate + ' \nGenerated By Admin';
      doc.setFontSize(16); //changed
      //doc.setFontStyle('bold'); //added
      doc.text(reportHeading, 10, yPos);
      yPos += 20;

      // Add branding text to the footer
      doc.setFontSize(10); // Set font size for branding text
      doc.setTextColor(0); // Set text color
      /*doc.text(
        'Extra Dimensions 188 Pty Ltd',
        10,
        doc.internal.pageSize.height - 10
      );*/

      const tableHeaders = [
        'Name',
        'Surname',
        'Email',
        'Phone Number',
        'Company Name',
        'Company Number',
      ];
      const colWidths = [40, 40, 60, 40, 40, 40];
      doc.setFontSize(12);

      doc.setFillColor(105, 240, 174);
      doc.setTextColor(0);
      doc.setFont('bold');
      doc.rect(
        10,
        yPos -2,
        colWidths.reduce((a, b) => a + b),
        15,
        'F'
      );
      let xPos = 10;
      for (let i = 0; i < tableHeaders.length; i++) {
        doc.text(tableHeaders[i], xPos + 2, yPos + 8);
        xPos += colWidths[i];
      }
      yPos += 15;

      doc.setFont('normal');

      /*this.cardData.forEach((Tenant) => {
        xPos = 10;

        for (let i = 0; i < tableHeaders.length; i++) {
          const headerKey = tableHeaders[i];
          let cellContent = this.getCellContent(Tenant, headerKey);
          if (cellContent.length > colWidths[i] / 3) {
            cellContent = doc.splitTextToSize(cellContent, colWidths[i] - 10);
          }

          console.log(
            `cellContent: ${cellContent}, xPos: ${xPos}, yPos: ${yPos}`
          );
          doc.setTextColor(0);
          doc.text(cellContent, xPos, yPos + 8);
          xPos += colWidths[i];
        }

        yPos += 10;
      });*/

      //FOOTER
      const brandingText = 'Extra Dimensions 188 Pty Ltd' //added
      doc.setFontSize(10);
      doc.setTextColor(100); //changed
      //doc.text('Extra Dimensions 188 Pty Ltd', 10, doc.internal.pageSize.height - 10);
      doc.text(brandingText, doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() - 10, {
        align: 'center'
      }); //added

      this.cardData.forEach((Tenant, index) => {
        xPos = 10;

        // Check if the row is even and set background color accordingly
        if (isOddRow) {
          doc.setFillColor(240, 240, 240);
        } else {
          doc.setFillColor(255, 255, 255);
        }

        doc.rect(
          10,
          yPos - 2, // Adjust the Y position slightly for background color
          colWidths.reduce((a, b) => a + b),
          10,
          'F'
        );

        for (let i = 0; i < tableHeaders.length; i++) {
          const headerKey = tableHeaders[i];
          let cellContent = this.getCellContent(Tenant, headerKey);
          if (cellContent.length > colWidths[i] / 3) {
            cellContent = doc.splitTextToSize(cellContent, colWidths[i] - 10);
          }

          doc.setTextColor(0);
          doc.text(cellContent, xPos, yPos + 8);
          xPos += colWidths[i];
        }
        yPos += 10;
        isOddRow = !isOddRow;
      });


      doc.save('Tenant_Report.pdf');
    }
    else {
      console.error("No data to generate PDF.");
    }
  }

  getCellContent(tenant: any, headerKey: any): any {
    switch (headerKey) {
      case 'Name':
        return tenant.user.name ;
      case 'Surname':
        return tenant.user.surname;
      case 'Email':
        return tenant.user.email;
        case 'Phone Number':
        return tenant.user.phoneNumber;
      case 'Company Name':
        return tenant.companyName;
      case 'Company Number':
        return tenant.companyNumber;
      default:
        return tenant[headerKey] !== undefined && tenant[headerKey] !== null
            ? tenant[headerKey].toString()
            : '';
    }
  }
}

/*import { Component, ElementRef, ViewChild,OnInit } from '@angular/core';
import jsPDF, { jsPDFAPI } from 'jspdf';
import { ViewTenantsComponent } from '../../viewTenants/view-tenants/view-tenants.component';
import { Tenant } from 'src/app/shared/UserModels/Tenant';
import { TenantService } from './../../../../services/tenant.service';
import { CreateTenantModalComponent } from '../../viewTenants/view-tenants/createTenantModal/create-tenant-modal/create-tenant-modal.component';
import { MatTableDataSource } from '@angular/material/table';

@Component({
  selector: 'app-generate-tenants-report',
  templateUrl: './generate-tenants-report.component.html',
  styleUrls: ['./generate-tenants-report.component.scss']
})

export class GenerateTenantsReportComponent implements OnInit{

  dataSource = new MatTableDataSource<Tenant>();

  ngOnInit(): void {
    this.tenantService.getTenants().subscribe((tenants: any) => {
      this.dataSource.data = tenants;
      this.fetchTableData();
    });
  }

title ="Tenant report";

constructor(

  private tenantService: TenantService,
  ){}

  @ViewChild('cards', { static: false }) cardsContainer!: ElementRef;

  cardData: any[] = [];

  async fetchTableData() {
    try {
      this.tenantService.getTenants().subscribe({
        next: (response) => {
          this.cardData = response;
          console.log(this.cardData);
          this.downloadPDF();
        },
        error: (error) => {
          console.error("Error fetching data:", error);
        }
      });
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  }

  downloadPDF(){

    if (this.cardData && this.cardData.length > 0) {
      const doc = new jsPDF('landscape');
      let yPos = 20;

      const today = new Date();
      const formattedDate = today.toDateString();
      doc.setFontSize(18);
      doc.text('Tenant Report - ' + formattedDate, 10, yPos);
      yPos += 15;

       const tableHeaders = ['Email','First Name', 'Surname', 'Job Title'];
       const colWidths = [30, 30, 40, 60, 40];
       doc.setFontSize(12);

       doc.setFillColor(105, 240, 174);
       doc.setTextColor(0);
       doc.setFont('bold');
       doc.rect(10, yPos, colWidths.reduce((a, b) => a + b), 10, 'F');
       let xPos = 10;
       for (let i = 0; i < tableHeaders.length; i++) {
         doc.text(tableHeaders[i], xPos + 2, yPos + 8);
         xPos += colWidths[i];
       }
       yPos += 10;

       doc.setFont('normal');

       this.cardData.forEach(Tenant => {
         xPos = 10;

         for (let i = 0; i < tableHeaders.length; i++) {
           const headerKey = tableHeaders[i];
           let cellContent = this.getCellContent(Tenant, headerKey);
           if (cellContent.length > colWidths[i] / 3) {
                        cellContent = doc.splitTextToSize(cellContent, colWidths[i] - 10);
                      }


           console.log(`cellContent: ${cellContent}, xPos: ${xPos}, yPos: ${yPos}`);
           doc.setTextColor(0);
           doc.text(cellContent, xPos, yPos + 8);
           xPos += colWidths[i];
         }

        yPos += 10;

      });

      doc.save('Tenant_Report.pdf');
    } else {
      console.error("No data to generate PDF.");
    }
  }

  getCellContent(tenant: any, headerKey: any): any {
    switch (headerKey) {
      case 'email':
        return tenant.email;
       case 'firstname':
        return tenant.firstname;
      case 'surname':
        return tenant.surname;
      case 'jobtitle':
        return tenant.jobtitle;
      default:
        return tenant[headerKey] !== undefined && tenant[headerKey] !== null
            ? tenant[headerKey].toString()
            : '';
    }
  }
}*/
