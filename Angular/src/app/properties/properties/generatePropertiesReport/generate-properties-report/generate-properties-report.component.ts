import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Route } from '@angular/router';
//import { Chart, ChartOptions } from 'chart.js';
import jsPDF from 'jspdf';
import { PropertiesService } from 'src/app/services/properties.service';
import { Inspection } from 'src/app/shared/Property/Inspection';
import { Property } from 'src/app/shared/Property/Property';
import { Recovery } from 'src/app/shared/Property/Recovery';
import 'jspdf-autotable';


@Component({
  selector: 'app-generate-properties-report',
  templateUrl: './generate-properties-report.component.html',
  styleUrls: ['./generate-properties-report.component.scss']
})
export class GeneratePropertiesReportComponent implements OnInit{
  chart: any;
  propertyDetail : Property = new Property();
  recoveries : Recovery[] = [];
  inspections : Inspection[] = [];
  properties : Property[] = [];
  selectedPropertyId: number | undefined;

  @ViewChild('barChartCanvas') barChartCanvas!: ElementRef;
  property: any;

  constructor(private _propertiesService : PropertiesService, private route : ActivatedRoute) {

  }

  ngOnInit(): void {
    this.getAllProperties();
    this.getAllInspections();
    this.getAllRecoveries();
    //this.generateBarGraph();
  }

  loadProperty(propertyId: number) {
    this._propertiesService.getProperty(propertyId).subscribe((result) => {
      this.propertyDetail = result;
      console.log("Property Result", result);
      this.loadRecoveries(propertyId); // Load recoveries for the selected property
      this.loadInspections(propertyId); // Load inspections for the selected property
    });
  }

  loadRecoveries(propertyId: number) {
    this._propertiesService.getRecoveriesForProperty(propertyId).subscribe((recoveries) => {
      this.recoveries = recoveries;
    });
  }

  loadInspections(propertyId: number) {
    this._propertiesService.getInspectionsForProperty(propertyId).subscribe((inspections) => {
      this.inspections = inspections;
    });
  }

getAllProperties() {
  this._propertiesService.getProperties().subscribe((properties: any) => {
  this.properties = properties;
  console.log("Property Array", properties)
  });
}

getAllInspections() {
  this._propertiesService.getInspections().subscribe((inspections: any) => {
  this.inspections = inspections;
  console.log("Inspection Array", inspections)
  });
}

getAllRecoveries() {
  this._propertiesService.getRecoveries().subscribe((recoveries: any) => {
  this.recoveries = recoveries;
  console.log("Recovery Array", recoveries)
  });
}

// Inside your GeneratePropertiesReportComponent class

/*generateBarGraph() {
  // Fetch properties data (replace with your actual data fetching code)
  this._propertiesService.getProperties().subscribe((properties: Property[]) => {
    const propertyLabels = properties.map(property => `Property ${property.propertyID}`);
    const recoveryAmounts = properties.map(property => {
      return property.recoveries.reduce((total, recovery) => total + recovery.recoveryAmount, 0);
    });

    const chartOptions: ChartOptions = { // Define the chart options
      scales: {
        y: {
          beginAtZero: true // Adjust this to your requirements
        }
      }
    };

    new Chart(this.barChartCanvas.nativeElement, {
      type: 'bar',
      data: {
        labels: propertyLabels,
        datasets: [{
          label: 'Total Recovery Amounts',
          data: recoveryAmounts,
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1
        }]
      },
      options: chartOptions // Use the defined chart options
    });
  });
}*/


  generateReport() {
    if (this.selectedPropertyId !== undefined) {
      this.loadProperty(this.selectedPropertyId);
    }
  }

  generatePDF() {
    // Create a new jsPDF instance
    const doc = new jsPDF();

    // Set initial vertical position
    let yPos = 20;

    // Get today's date
    const today = new Date();
    const formattedDate = today.toDateString();

    // Report heading
    const reportHeading = `Property Report for ${this.propertyDetail.description} Generated on ${formattedDate}\nGenerated By Admin`;
    doc.setFontSize(18);
    doc.text(reportHeading, 10, yPos);
    yPos += 30; // Increase yPos to create more space for the multiline heading

    // Add branding text to the footer
    doc.setFontSize(10);
    doc.setTextColor(0);
    doc.text('Extra Dimensions 188 Pty Ltd', 10, doc.internal.pageSize.height - 10);

    // Set font styles
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(18);

    // // Add header
    // doc.text(`Property Report: ${this.propertyDetail.description}`, 105, ypos + 20, { align: 'center' });

    // Define margin and line height
    const leftMargin = 20;
    const lineHeight = 6; // Adjust line height for spacing

    // Add broker information
    doc.setFontSize(14);
    doc.text('Broker Information', leftMargin, 40);
    doc.setFontSize(12);
    doc.text(`Name: ${this.propertyDetail.broker.name} ${this.propertyDetail.broker.surname}`, leftMargin, 40 + lineHeight);
    doc.text(`Phone Number: ${this.propertyDetail.broker.phoneNumber}`, leftMargin, 40 + 2 * lineHeight);
    doc.text(`Commission on Property: R${this.propertyDetail.broker.commissionRate * this.propertyDetail.purchaseAmount}`, leftMargin, 40 + 3 * lineHeight);

    // Add recoveries information
    doc.setFontSize(14);
    doc.text('Recoveries Information', leftMargin, 40 + 5 * lineHeight);
    doc.setFontSize(12);
    this.recoveries.forEach((recovery, index) => {
        const recoveryPosition = 40 + (7 + index * 5) * lineHeight;
        doc.text(`Recovery ${index + 1}:
        Amount: R ${recovery.recoveryAmount}
        Description: ${recovery.recoveryDescription}
        Type: ${recovery.recoveryType?.recoveryTypeDescription}`, leftMargin, recoveryPosition);
        
    });

    // Add inspections information
    doc.setFontSize(14);
    const inspectionsTopMargin = 40 + (7 + this.recoveries.length * 5) * lineHeight;
    doc.text('Inspections Information', leftMargin, inspectionsTopMargin);
    doc.setFontSize(12);

    const inspectionLineCount = 3; // Adjust as needed

    this.inspections.forEach((inspection, index) => {
        const verticalPosition = inspectionsTopMargin + (2 + index * (inspectionLineCount + 1)) * lineHeight;
        doc.text(`Inspection ${index + 1}:
        Date: ${inspection.inspectionDate}
        Description: ${inspection.inspectionDescription}
        Type: ${inspection.inspectionType?.inspectionTypeName}
        Status: ${inspection.inspectionStatus?.inspectionStatusName}`, leftMargin, verticalPosition);
    });

    // Save the PDF
    doc.save('property_report.pdf');
}
generateAllPropertiesReport() {
  // Create a new jsPDF instance with portrait orientation
  const doc = new jsPDF({
    orientation: 'portrait',
  });

  // Set font styles
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(12);

  let totalPages = 1; // Initialize total pages

  this.properties.forEach((property, propertyIndex) => {
    // Calculate remaining space in the current page
    const remainingSpace = doc.internal.pageSize.height - doc.getFontSize() - 10; // Adjust as needed

    // Add page for each property with a page break if there's not enough space
    if (propertyIndex > 0) {
      if (remainingSpace < 0) {
        doc.addPage();
        totalPages++;
      } else {
        doc.addPage(); // Start a new page for the next property
        totalPages++;
      }
    }

    // Define margin and line height
    const leftMargin = 20;
    const lineHeight = 12;
    let yPos = 40;

    const today = new Date();
    const formattedDate = today.toDateString();
    const reportHeading = 'All Properties Report Generated on ' + formattedDate + ' \nGenerated By Admin';
    doc.setFontSize(16); //changed
    doc.text(reportHeading, 10, yPos );
    yPos += 20;

    // Add header
    doc.setFontSize(16);

    // Check if there's enough space for the title
    if (yPos + 2 * lineHeight > doc.internal.pageSize.height - 10) {
      doc.addPage();
      totalPages++;
      yPos = 40;
    }

    doc.text(`Property Report: ${property.description}`, 105, yPos, { align: 'center' });
    yPos += 2 * lineHeight;

    // Add broker information
    doc.setFontSize(14);

    // Check if there's enough space for the broker information
    if (yPos + 2 * lineHeight > doc.internal.pageSize.height - 10) {
      doc.addPage();
      totalPages++;
      yPos = 40;
    }

    doc.text('Broker Information', leftMargin, yPos);
    yPos += lineHeight;
    doc.setFontSize(12);
    doc.text(`
      Name: ${property.broker.name} ${property.broker.surname}
      Phone Number: ${property.broker.phoneNumber}
      Commission on Property: R${property.broker.commissionRate * property.purchaseAmount}`, leftMargin, yPos);
    yPos += 2 * lineHeight;

    // Add recoveries information
    doc.setFontSize(14);
    doc.text('Recoveries Information', leftMargin, yPos);
    yPos += lineHeight;
    doc.setFontSize(12);
    this.recoveries.forEach((recovery, index) => {
      // Check if there's enough space for this section
      if (yPos + 2 * lineHeight > doc.internal.pageSize.height - 10) {
        doc.addPage();
        totalPages++;
        yPos = 40;
      }

      doc.text(`
        Recovery ${index + 1}:
        Amount: R ${recovery.recoveryAmount}
        Description: ${recovery.recoveryDescription}
        Type: ${recovery.recoveryType?.recoveryTypeDescription}`, leftMargin, yPos);
      yPos += 2 * lineHeight;
    });
    yPos += lineHeight;

    // Add inspections information
    doc.setFontSize(14);
    doc.text('Inspections Information', leftMargin, yPos);
    yPos += lineHeight;
    doc.setFontSize(12);

    const inspectionLineCount = 1; // Adjust as needed

    this.inspections.forEach((inspection, index) => {
      // Check if there's enough space for this section
      if (yPos + 3 * lineHeight > doc.internal.pageSize.height - 10) {
        doc.addPage();
        totalPages++;
        yPos = 40;
      }

      doc.text(`Inspection ${index + 1}:
        Date: ${inspection.inspectionDate}
        Description: ${inspection.inspectionDescription}
        Type: ${inspection.inspectionType?.inspectionTypeName}
        Status: ${inspection.inspectionStatus?.inspectionStatusName}`, leftMargin, yPos);
      yPos += 3 * lineHeight;
    });
  });

  // Add page numbers to the bottom margin
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.text(`Page ${i} of ${totalPages}`, doc.internal.pageSize.width - 30, doc.internal.pageSize.height - 10);
  }

  
  // FOOTER (Branding Text)
  const brandingText = 'Extra Dimensions 188 Pty Ltd';
  doc.setFontSize(10);
  doc.setTextColor(100); // Adjust text color
  doc.text(brandingText, doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() - 10, {
    align: 'right'
  });

  // Save the PDF
  doc.save('all_properties_report.pdf');
}



/*import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Route } from '@angular/router';
//import { Chart, ChartOptions } from 'chart.js';
import jsPDF from 'jspdf';
import { PropertiesService } from 'src/app/services/properties.service';
import { Inspection } from 'src/app/shared/Property/Inspection';
import { Property } from 'src/app/shared/Property/Property';
import { Recovery } from 'src/app/shared/Property/Recovery';
import 'jspdf-autotable';

@Component({
  selector: 'app-generate-properties-report',
  templateUrl: './generate-properties-report.component.html',
  styleUrls: ['./generate-properties-report.component.scss']
})
export class GeneratePropertiesReportComponent implements OnInit{
  chart: any;
  propertyDetail : Property = new Property();
  recoveries : Recovery[] = [];
  inspections : Inspection[] = [];
  properties : Property[] = [];
  selectedPropertyId: number | undefined;

  @ViewChild('barChartCanvas') barChartCanvas!: ElementRef;
  property: any;

  constructor(private _propertiesService : PropertiesService, private route : ActivatedRoute) {

  }

  ngOnInit(): void {
    this.getAllProperties();
    this.getAllInspections();
    this.getAllRecoveries();
    //this.generateBarGraph();
  }

  loadProperty(propertyId: number) {
    this._propertiesService.getProperty(propertyId).subscribe((result) => {
      this.propertyDetail = result;
      console.log("Property Result", result);
      this.loadRecoveries(propertyId); // Load recoveries for the selected property
      this.loadInspections(propertyId); // Load inspections for the selected property
    });
  }

  loadRecoveries(propertyId: number) {
    this._propertiesService.getRecoveriesForProperty(propertyId).subscribe((recoveries) => {
      this.recoveries = recoveries;
    });
  }

  loadInspections(propertyId: number) {
    this._propertiesService.getInspectionsForProperty(propertyId).subscribe((inspections) => {
      this.inspections = inspections;
    });
  }

getAllProperties() {
  this._propertiesService.getProperties().subscribe((properties: any) => {
  this.properties = properties;
  console.log("Property Array", properties)
  });
}

getAllInspections() {
  this._propertiesService.getInspections().subscribe((inspections: any) => {
  this.inspections = inspections;
  console.log("Inspection Array", inspections)
  });
}

getAllRecoveries() {
  this._propertiesService.getRecoveries().subscribe((recoveries: any) => {
  this.recoveries = recoveries;
  console.log("Recovery Array", recoveries)
  });
}

// Inside your GeneratePropertiesReportComponent class

/*generateBarGraph() {
  // Fetch properties data (replace with your actual data fetching code)
  this._propertiesService.getProperties().subscribe((properties: Property[]) => {
    const propertyLabels = properties.map(property => `Property ${property.propertyID}`);
    const recoveryAmounts = properties.map(property => {
      return property.recoveries.reduce((total, recovery) => total + recovery.recoveryAmount, 0);
    });

    const chartOptions: ChartOptions = { // Define the chart options
      scales: {
        y: {
          beginAtZero: true // Adjust this to your requirements
        }
      }
    };

    new Chart(this.barChartCanvas.nativeElement, {
      type: 'bar',
      data: {
        labels: propertyLabels,
        datasets: [{
          label: 'Total Recovery Amounts',
          data: recoveryAmounts,
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1
        }]
      },
      options: chartOptions // Use the defined chart options
    });
  });
}*


  generateReport() {
    if (this.selectedPropertyId !== undefined) {
      this.loadProperty(this.selectedPropertyId);
    }
  }

  generatePDF() {
    // Create a new jsPDF instance
    const doc = new jsPDF();

    // Set initial vertical position
    let yPos = 20;

    // Get today's date
    const today = new Date();
    const formattedDate = today.toDateString();

    // Report heading
    const reportHeading = `Property Report for ${this.propertyDetail.description} Generated on ${formattedDate}\nGenerated By Admin`;
    doc.setFontSize(18);
    doc.text(reportHeading, 10, yPos);
    yPos += 30; // Increase yPos to create more space for the multiline heading

    // Add branding text to the footer
    doc.setFontSize(10);
    doc.setTextColor(0);
    doc.text('Extra Dimensions 188 Pty Ltd', 10, doc.internal.pageSize.height - 10);

    // Set font styles
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(18);

    // // Add header
    // doc.text(`Property Report: ${this.propertyDetail.description}`, 105, ypos + 20, { align: 'center' });

    // Define margin and line height
    const leftMargin = 20;
    const lineHeight = 6; // Adjust line height for spacing

    // Add broker information
    doc.setFontSize(14);
    doc.text('Broker Information', leftMargin, 40);
    doc.setFontSize(12);
    doc.text(`Name: ${this.propertyDetail.broker.name} ${this.propertyDetail.broker.surname}`, leftMargin, 40 + lineHeight);
    doc.text(`Phone Number: ${this.propertyDetail.broker.phoneNumber}`, leftMargin, 40 + 2 * lineHeight);
    doc.text(`Commission on Property: R${this.propertyDetail.broker.commissionRate * this.propertyDetail.purchaseAmount}`, leftMargin, 40 + 3 * lineHeight);

    // Add recoveries information
    doc.setFontSize(14);
    doc.text('Recoveries Information', leftMargin, 40 + 5 * lineHeight);
    doc.setFontSize(12);
    this.recoveries.forEach((recovery, index) => {
        const recoveryPosition = 40 + (7 + index * 5) * lineHeight;
        doc.text(`Recovery ${index + 1}:
        Amount: R ${recovery.recoveryAmount}
        Description: ${recovery.recoveryDescription}
        Type: ${recovery.recoveryType?.recoveryTypeDescription}`, leftMargin, recoveryPosition);
    });

    // Add inspections information
    doc.setFontSize(14);
    const inspectionsTopMargin = 40 + (7 + this.recoveries.length * 5) * lineHeight;
    doc.text('Inspections Information', leftMargin, inspectionsTopMargin);
    doc.setFontSize(12);

    const inspectionLineCount = 3; // Adjust as needed

    this.inspections.forEach((inspection, index) => {
        const verticalPosition = inspectionsTopMargin + (2 + index * (inspectionLineCount + 1)) * lineHeight;
        doc.text(`Inspection ${index + 1}:
        Date: ${inspection.inspectionDate}
        Description: ${inspection.inspectionDescription}
        Type: ${inspection.inspectionType?.inspectionTypeName}
        Status: ${inspection.inspectionStatus?.inspectionStatusName}`, leftMargin, verticalPosition);
    });

    // Save the PDF
    doc.save('property_report.pdf');
}


generateAllPropertiesReport() {
  // Create a new jsPDF instance
  const doc = new jsPDF();

  // Set font styles
  const font = 'helvetica';
  const fontStyle = 'normal';
  const fontSize = 12;

  this.properties.forEach((property, propertyIndex) => {
      // Add page for each property except the first one
      if (propertyIndex > 0) {
          doc.addPage();
      }

      // Add header
      doc.setFontSize(18);
      doc.text(`Property Report: ${property.description}`, 105, 20, { align: 'center' });

       // Add background color for property heading
      doc.setFillColor(200, 200, 200); // Light gray
      doc.rect(0, 0, doc.internal.pageSize.width, 30, 'F');

       // Add heading for the property with a bullet
      doc.setFont(font, 'bold');
      doc.setFontSize(fontSize);
      doc.text('\u2022 Property Report: ' + property.description, 10, 20);

      // Define margin and line height
      const leftMargin = 20;
      const lineHeight = 10;

      const propertyTable = [];
      propertyTable.push([{ content: 'Broker Information', colSpan: 2, styles: { fontStyle: 'bold' } }, {}]);
      propertyTable.push(['Name', `${property.broker.name} ${property.broker.surname}`]);
      propertyTable.push(['Phone Number', property.broker.phoneNumber]);
      propertyTable.push(['Commission on Property', `R${property.broker.commissionRate * property.purchaseAmount}`]);

      
      // Create a table for recoveries information
      const recoveryTable = [];
      recoveryTable.push([{ content: 'Recoveries Information', colSpan: 2, styles: { fontStyle: 'bold' } }, {}]);
      property.recoveries.forEach((recovery, index) => {
        recoveryTable.push([`Recovery ${index + 1}`, `Amount: R ${recovery.recoveryAmount}\nDescription: ${recovery.recoveryDescription}\nType: ${recovery.recoveryType?.recoveryTypeDescription}`]);
      });

      // Create a table for inspections information
      const inspectionTable = [];
      inspectionTable.push([{ content: 'Inspections Information', colSpan: 2, styles: { fontStyle: 'bold' } }, {}]);
      property.inspections.forEach((inspection, index) => {
        inspectionTable.push([`Inspection ${index + 1}`, `Date: ${inspection.inspectionDate}\nDescription: ${inspection.inspectionDescription}\nType: ${inspection.inspectionType?.inspectionTypeName}\nStatus: ${inspection.inspectionStatus?.inspectionStatusName}`]);
      });

      // Set properties for tables
    const tableOptions = {
      startY: 40,
      margin: { left: leftMargin },
      styles: { font: font, fontStyle: fontStyle, fontSize: fontSize },
      tableWidth: 'auto',
      theme: 'plain',
    };

    
    // Add broker table
    doc.autoTable(brokerTable, tableOptions);

    // Add recovery table
    const recoveryTableStartY = doc.autoTable.previous.finalY + 10; // Add some spacing between tables
    doc.autoTable(recoveryTable, { ...tableOptions, startY: recoveryTableStartY });

    // Add inspection table
    const inspectionTableStartY = doc.autoTable.previous.finalY + 10; // Add some spacing between tables
    doc.autoTable(inspectionTable, { ...tableOptions, startY: inspectionTableStartY });

    // Save the PDF
    if (propertyIndex < this.properties.length - 1) {
      doc.addPage();
    }
  });
 
    // Save the PDF
    if (propertyIndex < this.properties.length - 1) {
      doc.addPage();
    }
  });*/

      // Add broker information
      /*doc.setFontSize(14);
      doc.text('Broker Information', leftMargin, 40);
      doc.setFontSize(12);
      doc.text(`Name: ${property.broker.name} ${property.broker.surname}`, leftMargin, 40 + lineHeight);
      doc.text(`Phone Number: ${property.broker.phoneNumber}`, leftMargin, 40 + 2 * lineHeight);
      doc.text(`Commission on Property: R${property.broker.commissionRate * property.purchaseAmount}`, leftMargin, 40 + 3 * lineHeight);

      // Add line break
      doc.line(20, 40 + 4 * lineHeight, 190, 40 + 4 * lineHeight);

      // Add recoveries information
      doc.setFontSize(14);
      doc.text('Recoveries Information', leftMargin, 40 + 5 * lineHeight);
      doc.setFontSize(12);
      property.recoveries.forEach((recovery, index) => {
        doc.text(`Recovery ${index + 1}:`, leftMargin, 40 + (7 + index * 5) * lineHeight);
        doc.text(`Amount: R ${recovery.recoveryAmount}`, leftMargin, 40 + (8 + index * 5) * lineHeight);
        doc.text(`Description: ${recovery.recoveryDescription}`, leftMargin, 40 + (9 + index * 5) * lineHeight);
        doc.text(`Type: ${recovery.recoveryType?.recoveryTypeDescription}`, leftMargin, 40 + (10 + index * 5) * lineHeight);
        doc.text('', leftMargin, 40 + (11 + index * 5) * lineHeight); // Add line break
      });

      // Add line break
      doc.line(20, 40 + (8 + property.recoveries.length * 5) * lineHeight, 190, 40 + (8 + property.recoveries.length * 5) * lineHeight);

      // Add inspections information
      doc.setFontSize(14);
      doc.text('Inspections Information', leftMargin, 40 + (12 + property.recoveries.length * 5) * lineHeight);
      doc.setFontSize(12);  

      const inspectionLineCount = 3; // Adjust as needed

      /*property.inspections.forEach((inspection, index) => {
        doc.text(`Inspection ${index + 1}:`, leftMargin, 40 + (14 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text(`Date: ${inspection.inspectionDate}`, leftMargin, 40 + (15 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text(`Description: ${inspection.inspectionDescription}`, leftMargin, 40 + (16 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text(`Type: ${inspection.inspectionType?.inspectionTypeName}`, leftMargin, 40 + (17 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text(`Status: ${inspection.inspectionStatus?.inspectionStatusName}`, leftMargin, 40 + (18 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text('', leftMargin, 40 + (19 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight); // Add line break
      });*

      this.inspections.forEach((inspection, index) => {
        doc.text(`Inspection ${index + 1}:`, leftMargin, 40 + (14 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text(`Date: ${inspection.inspectionDate}`, leftMargin, 40 + (15 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text(`Description: ${inspection.inspectionDescription}`, leftMargin, 40 + (16 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text(`Type: ${inspection.inspectionType?.inspectionTypeName}`, leftMargin, 40 + (17 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text(`Status: ${inspection.inspectionStatus?.inspectionStatusName}`, leftMargin, 40 + (18 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
        doc.text('', leftMargin, 40 + (19 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
      });
          /*doc.text(`Inspection ${index + 1}:
          Date: ${inspection.inspectionDate}
          Description: ${inspection.inspectionDescription}
          Type: ${inspection.inspectionType?.inspectionTypeName}
          Status: ${inspection.inspectionStatus?.inspectionStatusName}`, leftMargin, 40 + (11 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight);
          doc.text('', leftMargin, 40 + (12 + property.recoveries.length * 5 + index * (inspectionLineCount + 1)) * lineHeight); // Add line break
      });*

      // Add line break
      //doc.line(20, 40 + (19 + property.recoveries.length * 5 + property.inspections.length * (inspectionLineCount + 1)) * lineHeight, 190, 40 + (19 + property.recoveries.length * 5 + property.inspections.length * (inspectionLineCount + 1)) * lineHeight);
      //doc.line(20, 40 + (12 + property.recoveries.length * 5 + property.inspections.length * (inspectionLineCount + 1)) * lineHeight, 190, 40 + (12 + property.recoveries.length * 5 + property.inspections.length * (inspectionLineCount + 1)) * lineHeight);
  //});

  // Save the PDF
  doc.save('All_Properties_Report.pdf');
}
}*/
}